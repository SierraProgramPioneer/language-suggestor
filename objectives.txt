### Programming Language Suggester

Create an application for people interested in coding to decide which language they should learn first. Keep in mind that even though all languages have similarities and switching between languages and platforms is very common in both internships and jobs, applicants should still put some thought into which language they should learn.

Choose at least three languages that prospective learners should consider. Here are some possibilities:

- Ruby
- C#
- JavaScript
- Go
- Python
- Rust
- Swift

Feel free to pick _any_ language that interests you, either from this list or from your own research.

Then create a Programming Language Suggester webpage (using HTML, CSS, JavaScript, and Web APIs) that asks future students a series of questions about themselves and provides a language suggestion based on their answers. You can ask questions about the languages themselves, the kinds of environments where these languages are used, or anything else you find relevant. Note that you are not required to research the languages extensively and you can even choose silly or irrelevant questions to determine which language would be best — for instance, people that like singing in the rain may prefer Ruby while chihuahua lovers might prefer C#.

- Include a form with a minimum of 5 survey questions.
- Offer a minimum of 3 different language suggestions.
- One branch should return one result. It shouldn't be possible to be suggested two languages at once.
- Make sure that when the user submits the survey again (for a second or third time), that previous answers are hidden, cleared, or replaced prior to showing the new result.
- Don't forget regular Git commits and a detailed README. Commit messages should always be on-topic and professional in tone.

#### A Few Important Notes

For the branching logic, you are not required to take every possible combination of answers into account. Feel free to use very simple logic, or even ignore the user's responses for some questions as long as you show some good functionality and offer a minimum of 3 languages.

**Do not use `window` methods to interact with the user.** This includes `window.alert()`, `window.confirm()`, and `window.prompt()`. Instead use a form to gather user input and event handler properties or event listeners to handle events. To display the survey results to the user, you can show and hide HTML or update the values of existing HTML elements to communicate results.

It is also not required to publish your project to GitHub pages, but you may do so if you wish.

## Objectives

---

Your code will be reviewed for the following objectives:

- Form gathers input from the user.
- Branching is used to determine the result.
- Web API object properties or methods (not including `window` methods for alerting, prompting, or confirming) are used to display the result to the user.
- Event handler properties or event listeners are used to handle events.
- When the user submits the form again (for a second or third time) previous results are hidden, cleared, or replaced.
- Variable names are descriptive of what they represent and use lower camel case (e.g. `myVariableExample`).
- Web page is styled using custom CSS.
- Project is in a polished, portfolio-quality state.

### What is a polished, portfolio-quality state?

When a project is both polished and in a portfolio-quality state, this means:

- You've reviewed your project and your README prior to submitting it to make sure there are no errors or missing information and you are consistent in your indentation, spacing, and code structure.
- You are following the best practices and coding conventions we teach. Make sure that your:
  - Code is clean, well-refactored, and easy-to-read. This includes correct indentation, spacing, and including only necessary comments and debugging tools.
  - Commits are made regularly with clear messages that finish the phrase "It will…".

## Further Exploration

---

If you finish the objectives with time to spare, consider adding any of the following:

- Refactoring your code to make it easy to read and reuse. This includes separating your JS logic between user interface and business. This may also include reorganizing your code into multiple functions.
- Ask the user for their name and address them directly in all of the responses to them: _"Enrique, you ought to study Java, so you can learn how to make mobile apps for Android!"_.
- Make questions multiple choice (like a, b, or c) and determine which track is right for a user by identifying the letter that was most frequently selected. For example: _"You chose mostly a's, you should definitely study C#!"_.
- Other enhancements such as more custom CSS or styling with Bootstrap.

## Submission

---

Please submit your Github repo in the replies to this post. The structure of the URL should look like this:

`https://github.com/your-user-name/your-project-name`

Feel free to include a GH Pages link as well, but make sure to include the link to your repo so your source code can be reviewed.
